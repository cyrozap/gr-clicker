/* -*- c++ -*- */
/*
 * Copyright 2008, 2009 Dominic Spill, Michael Ossmann                                                                                            
 * Copyright 2007 Dominic Spill                                                                                                                   
 * Copyright 2005, 2006 Free Software Foundation, Inc.
 * 
 * This file is part of gr-bluetooth
 * 
 * gr-bluetooth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * gr-bluetooth is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with gr-bluetooth; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "bluetooth_tun.h"
#include "bluetooth_packet.h"
#include "tun.h"
#include <sys/time.h>

/*
 * Create a new instance of bluetooth_tun and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_tun_sptr
bluetooth_make_tun (int x, int channel)
{
  return bluetooth_tun_sptr (new bluetooth_tun (x, channel));
}

//private constructor
bluetooth_tun::bluetooth_tun (int x, int channel)
  : bluetooth_block ()
{
	sprintf(chan_name, "gr-bluetooth-%d", channel);

	if((d_tunfd = mktun(chan_name, d_ether_addr)) == -1) {
		fprintf(stderr, "warning: was not able to open TUN device, "
		   "disabling Wireshark interface\n");
		// throw std::runtime_error("cannot open TUN device");
	}
	d_x = x;
	d_cumulative_count = 0;
	// ensure that we are always given at least 72 symbols
	set_history(72);
}

//virtual destructor.
bluetooth_tun::~bluetooth_tun ()
{
}

int 
bluetooth_tun::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	char *in = (char*) input_items[0];
	int consumed, retval;
	int LAP;
	retval = bluetooth_packet::sniff_ac(in, noutput_items);
	if(-1==retval) {
		consumed = noutput_items;
	} else {
		bluetooth_packet_sptr packet = bluetooth_make_packet(&in[retval], noutput_items - retval);
		timeval tim;
		gettimeofday(&tim, NULL);
		printf("GOT PACKET on %d , LAP = %06x at sample %llu, wall time: %d.%06ld\n", d_x, packet->get_LAP(), d_cumulative_count + retval, (int)tim.tv_sec, tim.tv_usec);
		LAP = packet->get_LAP();
		unsigned char *data = (unsigned char *) calloc(1, 6);
		data[3] = (LAP & 0xff0000) >> 16;
		data[4] = (LAP & 0xff00) >> 8;
		data[5] = LAP & 0xff; 
// 		write_interface(d_tunfd, (unsigned char *) &in[retval], noutput_items - retval, d_ether_addr);
		write_interface(d_tunfd, data + 3, 3, 0, LAP, HCI_H1);
		consumed = retval + 72;
	}
	d_cumulative_count += consumed;

    // Tell runtime system how many output items we produced.
	return consumed;
}
