/* -*- c++ -*- */
/*
 * Copyright 2008, 2009 Dominic Spill, Michael Ossmann
 * Copyright 2007 Dominic Spill
 * Copyright 2005, 2006 Free Software Foundation, Inc.
 * 
 * This file is part of gr-bluetooth
 * 
 * gr-bluetooth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * gr-bluetooth is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with gr-bluetooth; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "bluetooth_LAP.h"
#include "bluetooth_packet.h"
#include <sys/time.h>

/*
 * Create a new instance of bluetooth_LAP and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
bluetooth_LAP_sptr
bluetooth_make_LAP (int x)
{
  return bluetooth_LAP_sptr (new bluetooth_LAP (x));
}

//private constructor
bluetooth_LAP::bluetooth_LAP (int x)
  : bluetooth_block ()
{
	d_x = x;
	d_cumulative_count = 0;
	// ensure that we are always given enough symbols for an Access Code
	set_history(68);
}

//virtual destructor.
bluetooth_LAP::~bluetooth_LAP ()
{
}

int 
bluetooth_LAP::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
	char *in = (char*) input_items[0];
	int consumed, retval;

	retval = bluetooth_packet::sniff_ac(in, noutput_items);
	if(-1==retval) {
		consumed = noutput_items;
	} else {
		bluetooth_packet_sptr packet = bluetooth_make_packet(&in[retval], noutput_items + history() - retval);
		timeval tim;
		gettimeofday(&tim, NULL);
		printf("GOT PACKET on %d , LAP = %06x at sample %llu, wall time: %d.%06ld\n", d_x, packet->get_LAP(), d_cumulative_count + retval, (int)tim.tv_sec, tim.tv_usec);
		consumed = retval + 68;
	}
	d_cumulative_count += consumed;

    // Tell runtime system how many output items we produced.
	return consumed;
}
